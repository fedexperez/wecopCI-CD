version: 0.2
env:
  variables:
    DB_HOST: "localhost"
    DB_DATABASE: "laravel"
phases:
 install:
   commands:
     - |
         export DEBIAN_FRONTEND=noninteractive
         #Update
         apt-get update
         #Install composer
         php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
         php composer-setup.php ;
         php -r "unlink('composer-setup.php');" ;
         mv composer.phar /usr/local/bin/composer
 build:
   commands:
     - echo installin mysql into machine
     - apt-get install -y mysql-server
     - cd ./WECOP
     - echo "creating .env file"
     - cp .env.example .env
     - echo Build started on `date`
     - echo Installing composer deps
     - composer Install
     - mysql --version
     - echo Connection to db mysql - $DB_HOST
     - echo Connection to db mysql - $DB_USERNAME
     - echo Connection to db mysql - $DB_PASSWORD
     - pwd
     - export HOST=$DB_HOST
     - export USER=$DB_USERNAME
     - export PASS=$DB_PASSWORD
     - echo DB_USERNAME=$USER >> .env
     - echo DB_PASSWORD=$PASS >> .env
     - echo DB_HOST=$HOST >> .env
     - echo APP_URL=http://wecop-env.eba-5f5wxxh3.us-east-1.elasticbeanstalk.com/public >> .env
     - cat .env
     - mysql --host ${HOST} -u ${USER} -p${PASS} -P 3306 -e "SHOW DATABASES;"
     - echo generating app key
     - php artisan key:generate
     - php artisan migrate:refresh
     - echo mysql fill
     - cd ..
     - ls ./docs/SqlScripts/
     - mysql --host ${HOST} -u ${USER} -p${PASS} -P 3306 -D laravel -e "SHOW TABLES FROM laravel;"
     - mysql --host ${HOST} -u ${USER} -p${PASS} -P 3306 -D laravel -e "Source ./docs/SqlScripts/createNotEcoProducts.sql;"
     - mysql --host ${HOST} -u ${USER} -p${PASS} -P 3306 -D laravel -e "Source ./docs/SqlScripts/createEcoProducts.sql;"
     - mysql --host ${HOST} -u ${USER} -p${PASS} -P 3306 -D laravel -e "Source ./docs/SqlScripts/createUsers.sql;"
     - mysql --host ${HOST} -u ${USER} -p${PASS} -P 3306 -D laravel -e "Source ./docs/SqlScripts/createReviews.sql;"
     
 post_build:
   commands:
     - echo Build completed on `date`
     - cd ./WECOP
     - echo running Unit test
     # Do you need to do this? In many cases phpunit will use sqlite or similar to avoid the need for a real DB.
     # If you don't need it delete it
     # - /usr/bin/mysql  -u root -e "GRANT ALL ON *.* TO 'test'@'localhost' IDENTIFIED BY '' WITH GRANT OPTION"
     # - mysqladmin -u test create test
     - php artisan test
     - php artisan serve